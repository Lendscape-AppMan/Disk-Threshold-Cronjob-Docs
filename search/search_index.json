{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Disk Usage Alert Script","text":"<p>This script is used to check the disk usage across all Elasticsearch nodes and to send an alert to MS Teams if disk usage exceeds a threshold.</p> <p>It uses a cronjob to run the script every 10 minutes and a ConfigMap to record the last alert time - if an alert was sent within the past 5 hours, no further alerts will be sent.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>python3 check_disk_usage.py</code> - Run disk checker script across nodes.</li> <li><code>kubectl apply -f k8s-manifests/disc_check_rbac.yaml</code> - Create service account, cluster role and cluster role binding.</li> <li><code>kubectl apply -f k8s-manifests/disk_check_cronjob.yaml</code> - Apply cronjob resource to cluster.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>check_disk_usage.py  # Python script to check disk usage.\nDockerfile    # Dockerfile to build image.\nrequirements.txt  # Script requirements.\nk8s-manifests/\n    disk_check_cronjob.yaml  # Cronjob resource to run script every 10 minutes.\n    disk_check_rbac.yaml     # RBAC resources to allow script to run.\n</code></pre>"},{"location":"functions/","title":"Functions","text":""},{"location":"functions/#check_disk_usage","title":"<code>check_disk_usage</code>","text":""},{"location":"functions/#check_disk_usage.exec_df_on_node","title":"<code>exec_df_on_node(node_name, volume_path)</code>","text":"<p>Execute 'df' command on a specified node using the Kubernetes Python client.</p> <p>Parameters:</p> Name Type Description Default <code>node_name</code> <code>str</code> <p>The name of the node where the command should be executed.</p> required <code>volume_path</code> <code>str</code> <p>The path to the volume on the node for which the 'df' command will be executed.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The output of the 'df' command if successful, None if an error occurs during execution.</p> <p>Raises:</p> Type Description <code>ApiException</code> <p>If no suitable pod is found on the specified node.</p> Source code in <code>Disk-Threshold-Cronjob/check_disk_usage.py</code> <pre><code>def exec_df_on_node(node_name: str, volume_path: str) -&gt; Optional[str]:\n\"\"\"\n    Execute 'df' command on a specified node using the Kubernetes Python client.\n\n    Args:\n        node_name (str): The name of the node where the command should be executed.\n        volume_path (str): The path to the volume on the node for which the 'df' command will be executed.\n\n    Returns:\n        Optional[str]: The output of the 'df' command if successful, None if an error occurs during execution.\n\n    Raises:\n        ApiException: If no suitable pod is found on the specified node.\n    \"\"\"\n    config.load_incluster_config()\n    api_instance = client.CoreV1Api()\n\n    # Find the right pod on the node\n    pod_list = api_instance.list_pod_for_all_namespaces(\n        field_selector=f\"spec.nodeName={node_name}\"\n    )\n    pod_name = next(\n        (\n            pod.metadata.name\n            for pod in pod_list.items\n            if pod.metadata.namespace == \"kube-system\"\n        ),\n        None,\n    )\n    if not pod_name:\n        raise ValueError(f\"No suitable pod found on node {node_name}\")\n\n    # Execute 'df' command in pod\n    exec_command = [\"/bin/sh\", \"-c\", f\"df -h {volume_path}\"]\n    try:\n        return stream.stream(\n            api_instance.connect_get_namespaced_pod_exec,\n            pod_name,\n            \"kube-system\",\n            command=exec_command,\n            stderr=True,\n            stdin=False,\n            stdout=True,\n            tty=False,\n        )\n    except ApiException as e:\n        print(f\"Error executing 'df' command on node {node_name}: {str(e)}\")\n        return None\n</code></pre>"},{"location":"functions/#check_disk_usage.get_all_node_names","title":"<code>get_all_node_names()</code>","text":"<p>Returns a list of all node names in the Kubernetes cluster.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of all node names in the cluster.</p> Source code in <code>Disk-Threshold-Cronjob/check_disk_usage.py</code> <pre><code>def get_all_node_names() -&gt; List[str]:\n\"\"\"\n    Returns a list of all node names in the Kubernetes cluster.\n\n    Returns:\n        List[str]: A list of all node names in the cluster.\n    \"\"\"\n    config.load_incluster_config()\n    api_instance = client.CoreV1Api()\n    nodes = api_instance.list_node()\n    return [node.metadata.name for node in nodes.items]\n</code></pre>"},{"location":"functions/#check_disk_usage.get_last_alert_timestamp","title":"<code>get_last_alert_timestamp(namespace='default')</code>","text":"<p>Get the timestamp of the last alert from the disk-usage-alert-timestamp ConfigMap.</p> <p>Parameters:</p> Name Type Description Default <code>namespace</code> <code>Optional[str]</code> <p>The namespace where the ConfigMap is located. Set to \"default\" if none provided.</p> <code>'default'</code> <p>Returns:</p> Name Type Description <code>datetime</code> <code>datetime</code> <p>The timestamp of the last alert as a datetime object.</p> <p>Raises:</p> Type Description <code>client.exceptions.ApiException</code> <p>If the Kubernetes API call fails and the error is not a \"Not Found\" error.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; get_last_alert_timestamp()\ndatetime.datetime(2022, 3, 29, 17, 30, 0)\n</code></pre> Source code in <code>Disk-Threshold-Cronjob/check_disk_usage.py</code> <pre><code>def get_last_alert_timestamp(namespace: Optional[str] = \"default\") -&gt; datetime:\n\"\"\"\n    Get the timestamp of the last alert from the disk-usage-alert-timestamp ConfigMap.\n\n    Args:\n        namespace (Optional[str]): The namespace where the ConfigMap is located. Set to \"default\" if none provided.\n\n    Returns:\n        datetime: The timestamp of the last alert as a datetime object.\n\n    Raises:\n        client.exceptions.ApiException: If the Kubernetes API call fails and the error is not a \"Not Found\" error.\n\n    Examples:\n        &gt;&gt;&gt; get_last_alert_timestamp()\n        datetime.datetime(2022, 3, 29, 17, 30, 0)\n    \"\"\"\n    config.load_incluster_config()\n    api_instance = client.CoreV1Api()\n\n    try:\n        config_map = api_instance.read_namespaced_config_map(\n            name=CONFIGMAP_NAME, namespace=namespace\n        )\n        timestamp = config_map.data.get(\"timestamp\")\n        return (\n            datetime.fromtimestamp(int(timestamp))\n            if timestamp\n            else datetime.fromtimestamp(0)\n        )\n    except client.exceptions.ApiException as e:\n        if e.status == 404:\n            return datetime.fromtimestamp(0)\n        else:\n            raise e\n</code></pre>"},{"location":"functions/#check_disk_usage.main","title":"<code>main()</code>","text":"<p>Check disk usage on multiple Kubernetes nodes and send an alert to MS Teams if disk usage exceeds a threshold.</p> <p>First, retrieves the last alert timestamp from a Kubernetes ConfigMap using <code>get_last_alert_timestamp()</code>.</p> <p>If the difference between the current time and the last alert timestamp is less than the alert interval, the function exits.</p> <p>Otherwise, it iterates over the specified <code>NODES</code> and retrieves the disk usage for a mounted volume using <code>subprocess.check_output()</code>.</p> <p>If the disk usage exceeds the <code>THRESHOLD</code>, it sends an alert to Teams using <code>send_teams_alert()</code>.</p> <p>If an alert is sent, the function updates the last alert timestamp in the ConfigMap using <code>update_last_alert_timestamp()</code>.</p> Example <p>main() Alert: Disk usage on node hpd-elasticsearch-es-data-hot-1 is at 85.6%, which is above the desired 70% threshold.</p> Source code in <code>Disk-Threshold-Cronjob/check_disk_usage.py</code> <pre><code>def main():\n\"\"\"\n    Check disk usage on multiple Kubernetes nodes and send an alert to MS Teams if disk usage exceeds a threshold.\n\n    First, retrieves the last alert timestamp from a Kubernetes ConfigMap using `get_last_alert_timestamp()`.\n\n    If the difference between the current time and the last alert timestamp is less than the alert interval, the function exits.\n\n    Otherwise, it iterates over the specified `NODES` and retrieves the disk usage for a mounted volume using `subprocess.check_output()`.\n\n    If the disk usage exceeds the `THRESHOLD`, it sends an alert to Teams using `send_teams_alert()`.\n\n    If an alert is sent, the function updates the last alert timestamp in the ConfigMap using `update_last_alert_timestamp()`.\n\n    Example:\n        &gt;&gt;&gt; main()\n        Alert: Disk usage on node hpd-elasticsearch-es-data-hot-1 is at 85.6%, which is above the desired 70% threshold.\n    \"\"\"\n    last_alert_timestamp = get_last_alert_timestamp()\n    current_time = datetime.now()\n\n    if current_time - last_alert_timestamp &lt; ALERT_INTERVAL:\n        print(\"Last alert was sent less than 5 hours ago, exiting...\")\n        return\n\n    alert_sent = False\n    NODES = get_all_node_names()\n    for node in NODES:\n        df_output = exec_df_on_node(node, \"/path/to/mounted/volume\")\n        if df_output is not None:\n            disk_usage_line = df_output.splitlines()[1]\n            disk_usage = int(disk_usage_line.split()[-2].rstrip(\"%\"))\n\n            if disk_usage &gt; THRESHOLD:\n                send_teams_alert(node, disk_usage)\n                alert_sent = True\n                break\n\n    if alert_sent:\n        update_last_alert_timestamp(current_time)\n</code></pre>"},{"location":"functions/#check_disk_usage.send_teams_alert","title":"<code>send_teams_alert(node, disk_usage)</code>","text":"<p>Send an alert to Teams when the disk usage exceeds a threshold.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>str</code> <p>The name of the node where disk usage exceeded the threshold.</p> required <code>disk_usage</code> <code>float</code> <p>The percentage of disk usage that triggered the alert.</p> required <p>Raises:</p> Type Description <code>requests.exceptions.RequestException</code> <p>If the HTTP request fails.</p> Source code in <code>Disk-Threshold-Cronjob/check_disk_usage.py</code> <pre><code>def send_teams_alert(node: str, disk_usage: float) -&gt; None:\n\"\"\"\n    Send an alert to Teams when the disk usage exceeds a threshold.\n\n    Args:\n        node (str): The name of the node where disk usage exceeded the threshold.\n        disk_usage (float): The percentage of disk usage that triggered the alert.\n\n    Raises:\n        requests.exceptions.RequestException: If the HTTP request fails.\n    \"\"\"\n    payload = {\n        \"@type\": \"MessageCard\",\n        \"@context\": \"http://schema.org/extensions\",\n        \"text\": f\"Alert: Disk usage on node {node} is at {disk_usage}%, which is above the desired {THRESHOLD}% threshold.\",\n    }\n    requests.post(TEAMS_WEBHOOK_URL, json=payload)\n</code></pre>"},{"location":"functions/#check_disk_usage.update_last_alert_timestamp","title":"<code>update_last_alert_timestamp(timestamp, namespace='default')</code>","text":"<p>Update timestamp of the last alert in ConfigMap.</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The new timestamp to update the ConfigMap with.</p> required <code>namespace</code> <code>Optional[str]</code> <p>The namespace where the ConfigMap is located. Set to \"default\" if none provided.</p> <code>'default'</code> <p>Raises:</p> Type Description <code>client.exceptions.ApiException</code> <p>If the Kubernetes API call fails.</p> Source code in <code>Disk-Threshold-Cronjob/check_disk_usage.py</code> <pre><code>def update_last_alert_timestamp(\n    timestamp: datetime, namespace: Optional[str] = \"default\"\n) -&gt; None:\n\"\"\"\n    Update timestamp of the last alert in ConfigMap.\n\n    Args:\n        timestamp (datetime): The new timestamp to update the ConfigMap with.\n        namespace (Optional[str]): The namespace where the ConfigMap is located. Set to \"default\" if none provided.\n\n    Raises:\n        client.exceptions.ApiException: If the Kubernetes API call fails.\n    \"\"\"\n    config.load_incluster_config()\n    api_instance = client.CoreV1Api()\n\n    # Check ConfigMap exists\n    try:\n        api_instance.read_namespaced_config_map(\n            name=CONFIGMAP_NAME, namespace=namespace\n        )\n        configmap_exists = True\n    except client.exceptions.ApiException as e:\n        if e.status == 404:\n            configmap_exists = False\n        else:\n            raise e\n\n    # Update or create ConfigMap with the new timestamp\n    new_configmap = client.V1ConfigMap(\n        metadata=client.V1ObjectMeta(name=CONFIGMAP_NAME),\n        data={\"timestamp\": str(int(timestamp.timestamp()))},\n    )\n\n    if configmap_exists:\n        api_instance.patch_namespaced_config_map(\n            name=CONFIGMAP_NAME, namespace=namespace, body=new_configmap\n        )\n    else:\n        api_instance.create_namespaced_config_map(\n            namespace=namespace, body=new_configmap\n        )\n</code></pre>"}]}